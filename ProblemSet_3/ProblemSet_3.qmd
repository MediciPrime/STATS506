---
title: "ProblemSet_3"
author: "Behram Radmanesh"
format: 
  html:
      code-fold: true
      code-tools: true
      embed-resources: true
toc: true
---

[Github Link](https://github.com/MediciPrime/STATS506/tree/main/ProblemSet_3)

## Problem 1 - Vision

### Part A

```{r}
library(kableExtra)
library(haven)

## Read in the XPT files
setwd("C:/Users/beh_2/Documents/STATS506/ProblemSet_3/data")
vision <- read_xpt("VIX_D.XPT")
demo <- read_xpt("DEMO_D.XPT")

## Merge 'vision' and 'demo' into 'main'
main <- merge(demo, vision, by = 'SEQN')

## Show the number of entries after merging
cat("Number of entries:", dim(main)[1])
```

### Part B

```{r}
## Create Column 'ageGroup' and subdivide 'RIDAGEYR' into it
main$ageGroup <- cut(main$RIDAGEYR, 
                     breaks = seq(0, max(main$RIDAGEYR) + 10, by=10),
                     labels = c("0-9", "10-19", "20-29", "30-39",
                                "40-49", "50-59", "60-69", "70-79",
                                "80-89"))

## Calculate Total People in ageGroup
glasses <- table(main$ageGroup[main$VIQ220==1])
noGlasses <- table(main$ageGroup[main$VIQ220==2])
tab <- cbind(as.data.frame(glasses), as.data.frame(noGlasses))
tab2 <- tab[c(1,2,4)]
names(tab2) <- c('Age_Group', 'No_Glasses', 'Glasses')
tab2['Total'] <- tab2$Glasses + tab2$No_Glasses

## Age Group Percentages
tab2['Percentages'] <- round((tab2$Glasses/tab2$Total)*100, 
                             digits = 1)
tab2 <- replace(tab2, is.na(tab2), 0)

countsNPercentage <- table(main$ageGroup[main$VIQ220==1])
countsNPercentage <- rbind(countsNPercentage, tab2$Percentages)
rownames(countsNPercentage) <- c("Counts", "Percentages")

## create a table with the valid proportions
countsNPercentage %>%
  kbl() %>%
  kable_paper("hover", full_width = F)
```

### Part C

Asked to predict whether a respondent wears glasses/contact lenses for distance vision.

```{r}
## Use RIDRETH1 for Race
## Use RIAGENDR for Gender
## Use INDFMPIR for PIR
## Use RIDAGEYR for Age
## Use VIQ220 for Glasses/Contact Lenses
mod1 <- lm(VIQ220==1 ~ RIDAGEYR, data = main)
summary(mod1)
AIC(mod1)

mod2 <- lm(VIQ220==1 ~ RIDAGEYR + RIDRETH1 + RIAGENDR, data = main)
summary(mod2)
AIC(mod2)

mod3 <- lm(VIQ220==1 ~ RIDAGEYR + RIDRETH1 + RIAGENDR + INDFMPIR,
           data = main)
summary(mod3)
AIC(mod3)

## Is 'pseudo-R^2 the same as adjusted-R^2?

```

### Part D

This part asks to determine if there is a difference between the number of men vs. women who wear distance corrective lenses.

```{r}
mod4 <- lm(VIQ220==1 ~ RIDAGEYR + RIDRETH1 + as.factor(RIAGENDR) 
           + INDFMPIR,
           data = main)

summary(mod4)

## Question: Would it be sufficient to utilize 'as.factor(RIAGENDR)'?
## Tried it and doesn't make a difference...
```


## Problem 2 - Sakila

### Part A
```{r}
library(DBI)
library(RSQLite)

sakila <- dbConnect(RSQLite::SQLite(), "sakila_master.db")

gg <- function(query) {
  dbGetQuery(sakila, query)
}

gg("
  SELECT release_year
    FROM film AS f
  ORDER BY f.release_year DESC
  LIMIT 4
   ")
```
Seems as though 2006 is the earliest release year. Although all the movies in the database are from that year.

### Part B

#### SQL w/ DataFrame

```{r}
## Dataframe w/ FID and Genre
filmCat <- gg("
          SELECT fc.film_id, fc.category_id
          FROM film_category AS fc
         ")

cat <- gg("
          SELECT c.category_id, c.name
          FROM category AS c
        ")

cCount <- table(filmCat$category_id)
minCount <- which.min(cCount)

cat(cat$name[cat$category_id == minCount], cCount[minCount], "\n")

```

Using the dataframe created from the 'film_list' table it was found that the 'Music' category had the smallest inventory at 281. While there are 51 number of unique movies from that category. 

#### SQL Single Query

```{r}
## Least Common Genre
gg("
   SELECT c.name, count(c.category_id) AS count
    FROM category AS c
    RIGHT JOIN film_category AS fc ON fc.category_id = c.category_id
    GROUP BY c.category_id
    ORDER BY count
    LIMIT 1
  ")

```

### Part C

#### SQL w/ DataFrame
```{r}
## Obtain Relevant Tables
customer <- gg("SELECT address_id FROM customer")
address <- gg("SELECT address_id, city_id FROM address")
city <- gg("SELECT city_id, country_id FROM city")
country <- gg("SELECT country_id, country FROM country")

## Identify Customer's city using their address
cities <- address$city_id[match(customer$address_id, 
                                address$address_id)]

## Connect the City to the Country
countries <- city$country_id[match(cities, city$city_id)]

## Aggregate Data into a Table
countryTable <- table(country$country[match(countries,
                                            country$country_id)])

## Identify Country w/ 13 Customers
countryTable[countryTable == 13]

```

#### SQL Single Query
```{r}
## Country With 13 Customers
gg("
    SELECT co.country, count(co.country) AS count
    FROM country AS co
    RIGHT JOIN (
       SELECT country_id
       FROM city AS ci
       RIGHT JOIN (
       SELECT city_id
       FROM customer AS cu
       LEFT JOIN address AS a ON cu.address_id = a.address_id
          ) AS cua ON cua.city_id = ci.city_id
    ) AS cicua ON cicua.country_id = co.country_id
    GROUP BY co.country
    HAVING count == 13")

```

A single SQL query was used to identify 'Music' and the total movies of that category in the inventory (281).

## Problem 3 - US Records

### Part A

```{r}
## Read in the Data
us500 <- read.csv("us500.csv", header = TRUE)

## Identify Percent of Email w/ '.com' in the TLD
length(us500$email[grepl(".com$", us500$email)])/length(us500$email)

```

### Part B

```{r}
## Extract User Names from the Emails
email <- strsplit(us500$email, "@")
username <- sapply(email, "[[", 1)

## Identify User Names w/out common alpha-numeric
username_wout_alpha_numeric <- grepl("[^a-zA-Z0-9]", username)

## Extract Domain Names from the Emails
domain <- sapply(email, "[[", 2)

## Remove the TLDs from Domain Names
domain <- gsub("\\.[a-z]{3}", "", domain)

## Identify Domain Names w/out common alpha-numeric
domain_wout_alpha_numeric <- grepl("[^a-zA-Z0-9]", domain)

## Check Length of alpha-numeric in Domain Name
length(which(domain_wout_alpha_numeric))

## Since none of the Domains Have alpha-numeric
## Use only the Usernames
print(length(which(username_wout_alpha_numeric[]==TRUE))/length(username_wout_alpha_numeric))

```

### Part C

```{r}
## Use 'substr' function to extract area codes
phone1 <- substr(us500$phone1, 1, 3)
phone2 <- substr(us500$phone2, 1, 3)

## Sort the phone numbers and identify most popular area codes
sort(table(c(phone1, phone2)), decreasing = TRUE)[1:5]

```

### Part D

```{r}



```

