---
title: "Problem Set 2"
author: "Behram Radmanesh"
format: 
  html:
      code-fold: true
      code-tools: true
toc: true
---

[Github Link](https://github.com/MediciPrime/STATS506/tree/main/ProblemSet_2)

## Problem 1 - Dice Game

This problem asks to create a function that codes for a dice game abiding by the following rules:
- The game uses a 6-sided dice and costs $2 to play per die rolled
- Winning roll requires a 3 or 5; anything else and you lose
- Winning value 3 produces 6 dollars; while value 5 produces 10 dollars

### Part A
#### Simple Loop

```{r}
## Function takes as input the number of dice rolls to play
loop <- function(num) {
  
  ## Check if input is numeric
  if (is.double(num) == TRUE) {
    
    ## If numeric then check if contains decimal
    if (num-as.integer(num) == 0) {
      
      ## Given it's not a decimal convert to integer
      num <- as.integer(num)
    }
    
    ## Given decimal check if a negative number was given
    else if (num-as.integer(num) < 0) {
      
      ## If negative decimal then tell user how number for converted
      cat("Negative entered value:", num, "was converted to", as.integer(-num), "\n")
      num <- as.integer(-num)
    }
    
    else {
      
      ## Given positive decimal convert accordingly
      cat("Entered value:", num, "converted to", as.integer(num), "\n")
      num <- as.integer(num)
    }
  }
  else if (is.numeric(num) == FALSE) {
    print("Please enter a natural number, eg. 1, 2, 3, ...")
    break
  }
  
  ## Create player deficit
  winnings = -(2*num)
  ## Simulate 'n'= num Dice Rolls
  rolls <- sample(1:6, num, replace=TRUE)
  
  ## Use for loop to calculate total winnings
  for (i in rolls) {
    ## if 3 is rolled add $6 to the winnings
    if (i == 3) {
      winnings <- winnings + 6
    }
    ## if 5 is rolled add $10 to the winnings
    else if (i == 5) {
      winnings <- winnings + 10
    }
  }
  return(winnings)
}

```

#### Vetorized Function

```{r}
## Function takes as input the number of dice rolls to play
vectorized <- function(num) {
  
 ## Check if input is numeric
  if (is.double(num) == TRUE) {
    
    ## If numeric then check if contains decimal
    if (num-as.integer(num) == 0) {
      
      ## Given it's not a decimal convert to integer
      num <- as.integer(num)
    }
    
    ## Given decimal check if a negative number was given
    else if (num-as.integer(num) < 0) {
      
      ## If negative decimal then tell user how number for converted
      cat("Negative entered value:", num, "was converted to", as.integer(-num), "\n")
      num <- as.integer(-num)
    }
    
    else {
      
      ## Given positive decimal convert accordingly
      cat("Entered value:", num, "converted to", as.integer(num), "\n")
      num <- as.integer(num)
    }
  }
  else if (is.numeric(num) == FALSE) {
    print("Please enter a natural number, eg. 1, 2, 3, ...")
    break
  }
  
  ## Create player deficit
  deficit = -(2*num)
  
  ## Simulate 'n'= num Dice Rolls
  rolls <- sample(1:6, num, replace=TRUE)
  
  ## create a vector specifying winnings for each roll
  rollWinnings <- c(0, 0, 6, 0, 10, 0)
  
  ## using 'rolls' to index over the 'rollWinnings' vector
  ## sum over all the possible winnings
  winnings <- sum(rollWinnings[rolls])
  
  return(winnings+deficit)
}

```

#### Vectorized with Tables

```{r}
## Function takes as input the number of dice rolls to play
tableVectorized <- function(num) {
  
  ## Check if input is numeric
  if (is.double(num) == TRUE) {
    
    ## If numeric then check if contains decimal
    if (num-as.integer(num) == 0) {
      
      ## Given it's not a decimal convert to integer
      num <- as.integer(num)
    }
    
    ## Given decimal check if a negative number was given
    else if (num-as.integer(num) < 0) {
      
      ## If negative decimal then tell user how number for converted
      cat("Negative entered value:", num, "was converted to", as.integer(-num), "\n")
      num <- as.integer(-num)
    }
    
    else {
      
      ## Given positive decimal convert accordingly
      cat("Entered value:", num, "converted to", as.integer(num), "\n")
      num <- as.integer(num)
    }
  }
  else if (is.numeric(num) == FALSE) {
    print("Please enter a natural number, eg. 1, 2, 3, ...")
    break
  }
  
  ## Create player deficit
  deficit = -(2*num)
  
  ## Simulate 'n'= num Dice Rolls & place the results into a table
  tRolls <- table(sample(1:6, num, replace=TRUE))
  
  ## create a vector specifying winnings for each roll
  rollWinnings <- c(0, 0, 6, 0, 10, 0)
  
  ## using 'tRolls' table to index over the 'rollWinnings' vector
  ## the table form avoids unnecessary looping over the rolls
  ## sum over all the possible winnings
  winnings <- sum(rollWinnings[as.numeric(names(tRolls))] * tRolls)
  
  return(cat("Total Winnings: ", winnings+deficit))
}

```

#### Loop with Apply

```{r}
## Function takes as input the number of dice rolls to play
loopApply <- function(num) {
  
  ## Check if input is numeric
  if (is.double(num) == TRUE) {
    
    ## If numeric then check if contains decimal
    if (num-as.integer(num) == 0) {
      
      ## Given it's not a decimal convert to integer
      num <- as.integer(num)
    }
    
    ## Given decimal check if a negative number was given
    else if (num-as.integer(num) < 0) {
      
      ## If negative decimal then tell user how number for converted
      cat("Negative entered value:", num, "was converted to", as.integer(-num), "\n")
      num <- as.integer(-num)
    }
    
    else {
      
      ## Given positive decimal convert accordingly
      cat("Entered value:", num, "converted to", as.integer(num), "\n")
      num <- as.integer(num)
    }
  }
  else if (is.numeric(num) == FALSE) {
    print("Please enter a natural number, eg. 1, 2, 3, ...")
    break
  }
  
  ## Create player deficit
  deficit = -(2*num)
  
  ## Simulate 'n'= num Dice Rolls
  rolls <- sample(1:6, num, replace=TRUE)
  
  ## create a vector specifying winnings for each roll
  rollWinnings <- c(0, 0, 6, 0, 10, 0)
  
  ## Using the vapply function to sum up the winnings
  winnings <- sum(mapply(sum, rollWinnings[rolls]))
  
  return(cat("Total Winnings: ", winnings+deficit))
}

```

