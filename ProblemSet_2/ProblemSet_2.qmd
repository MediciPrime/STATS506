---
title: "Problem Set 2"
author: "Behram Radmanesh"
format: 
  html:
      code-fold: true
      code-tools: true
      embed-resources: true
toc: true
---

[Github Link](https://github.com/MediciPrime/STATS506/tree/main/ProblemSet_2)

## Problem 1 - Dice Game

This problem asks to create a function that codes for a dice game abiding by the following rules: 

- The game uses a 6-sided dice and costs 2 dollars to play per dice rolled 
- Winning roll requires a 3 or 5; anything else and you lose 
- Winning value 3 produces 6 dollars; while value 5 produces 10 dollars

### Part A

#### Simple Loop

```{r}
## Function takes as input the number of dice rolls to play
#' Dice Rolling using a For Loop
#'
#' @param num 
#'
#' @return Output displaying the total winnings
loop <- function(num) {
  
  ## Check if input is numeric
  if (is.double(num) == TRUE) {
    
    ## If numeric then check if contains decimal
    if (num-as.integer(num) == 0) {
      
      ## Given it's not a decimal convert to integer
      num <- as.integer(num)
    }
    
    ## Given decimal check if a negative number was given
    else if (num-as.integer(num) < 0) {
      
      ## If negative decimal then tell user how number for converted
      cat("Negative entered value:", num, "was converted to", as.integer(-num), "\n")
      num <- as.integer(-num)
    }
    
    else {
      
      ## Given positive decimal convert accordingly
      cat("Entered value:", num, "converted to", as.integer(num), "\n")
      num <- as.integer(num)
    }
  }
  else if (is.numeric(num) == FALSE) {
    print("Please enter a natural number, eg. 1, 2, 3, ...")
    break
  }
  
  ## Create player deficit
  winnings = -(2*num)
  
  ## Simulate 'n'= num Dice Rolls
  rolls <- sample(1:6, num, replace=TRUE)
  
  ## Use for loop to calculate total winnings
  for (i in rolls) {
    
    ## if 3 is rolled add $6 to the winnings
    if (i == 3) {
      winnings <- winnings + 6
    }
    
    ## if 5 is rolled add $10 to the winnings
    else if (i == 5) {
      winnings <- winnings + 10
    }
  }
  return(cat("Total Winnings:", winnings))
}

```

#### Vetorized Function

```{r}
## Function takes as input the number of dice rolls to play
#' Dice Rolls via Vectorization
#'
#' @param num
#' @param nice = Parameter used to create tables for a downstream function
#'
#' @return Output displaying the total winnings
vectorized <- function(num, nice=1) {
  
 ## Check if input is numeric
  if (is.double(num) == TRUE) {
    
    ## If numeric then check if contains decimal
    if (num-as.integer(num) == 0) {
      
      ## Given it's not a decimal convert to integer
      num <- as.integer(num)
    }
    
    ## Given decimal check if a negative number was given
    else if (num-as.integer(num) < 0) {
      
      ## If negative decimal then tell user how number for converted
      cat("Negative entered value:", num, "was converted to",
          as.integer(-num), "\n")
      num <- as.integer(-num)
    }
    
    else {
      
      ## Given positive decimal convert accordingly
      cat("Entered value:", num, "converted to", as.integer(num), "\n")
      num <- as.integer(num)
    }
  }
  else if (is.numeric(num) == FALSE) {
    print("Please enter a natural number, eg. 1, 2, 3, ...")
    break
  }
  
  ## Create player deficit
  deficit = -(2*num)
  
  ## Simulate 'n'= num Dice Rolls
  rolls <- sample(1:6, num, replace=TRUE)
  
  ## create a vector specifying winnings for each roll
  rollWinnings <- c(0, 0, 6, 0, 10, 0)
  
  ## using 'rolls' to index over the 'rollWinnings' vector
  ## sum over all the possible winnings
  winnings <- sum(rollWinnings[rolls])
  
  if (nice==1) {
  
    return(cat("Total Winnings:", winnings+deficit))
  }
  else {
  
    return(winnings+deficit)
  }
}

```

#### Vectorized with Tables

```{r}
## Function takes as input the number of dice rolls to play
#' Dice Rolls using Vectorization and Tables
#'
#' @param num 
#'
#' @return Output displaying the total winnings
tableVectorized <- function(num) {
  
  ## Check if input is numeric
  if (is.double(num) == TRUE) {
    
    ## If numeric then check if contains decimal
    if (num-as.integer(num) == 0) {
      
      ## Given it's not a decimal convert to integer
      num <- as.integer(num)
    }
    
    ## Given decimal check if a negative number was given
    else if (num-as.integer(num) < 0) {
      
      ## If negative decimal then tell user how number for converted
      cat("Negative entered value:", num, "was converted to", as.integer(-num), "\n")
      num <- as.integer(-num)
    }
    
    else {
      
      ## Given positive decimal convert accordingly
      cat("Entered value:", num, "converted to", as.integer(num), "\n")
      num <- as.integer(num)
    }
  }
  else if (is.numeric(num) == FALSE) {
    print("Please enter a natural number, eg. 1, 2, 3, ...")
    break
  }
  
  ## Create player deficit
  deficit = -(2*num)
  
  ## Simulate 'n'= num Dice Rolls & place the results into a table
  tRolls <- table(sample(1:6, num, replace=TRUE))
  
  ## create a vector specifying winnings for each roll
  rollWinnings <- c(0, 0, 6, 0, 10, 0)
  
  ## using 'tRolls' table to index over the 'rollWinnings' vector
  ## the table form avoids unnecessary looping over the rolls
  ## sum over all the possible winnings
  winnings <- sum(rollWinnings[as.numeric(names(tRolls))] * tRolls)
  
  return(cat("Total Winnings: ", winnings+deficit))
}

```

#### Loop with Apply

```{r}
## Function takes as input the number of dice rolls to play
#' Dice Rolls via Apply
#'
#' @param num 
#'
#' @return Output displying the total winnings
loopApply <- function(num) {
  
  ## Check if input is numeric
  if (is.double(num) == TRUE) {
    
    ## If numeric then check if contains decimal
    if (num-as.integer(num) == 0) {
      
      ## Given it's not a decimal convert to integer
      num <- as.integer(num)
    }
    
    ## Given decimal check if a negative number was given
    else if (num-as.integer(num) < 0) {
      
      ## If negative decimal then tell user how number for converted
      cat("Negative entered value:", num, "was converted to", as.integer(-num), "\n")
      num <- as.integer(-num)
    }
    
    else {
      
      ## Given positive decimal convert accordingly
      cat("Entered value:", num, "converted to", as.integer(num), "\n")
      num <- as.integer(num)
    }
  }
  else if (is.numeric(num) == FALSE) {
    print("Please enter a natural number, eg. 1, 2, 3, ...")
    break
  }
  
  ## Create player deficit
  deficit = -(2*num)
  
  ## Simulate 'n'= num Dice Rolls
  rolls <- sample(1:6, num, replace=TRUE)
  
  ## create a vector specifying winnings for each roll
  rollWinnings <- c(0, 0, 6, 0, 10, 0)
  
  ## Using the apply function to sum up the winnings
  winnings <- apply(as.matrix(rollWinnings[rolls]), 2, sum)
  
  return(cat("Total Winnings: ", winnings+deficit))
}

```

### Part B

The following bit of code is here to demonstrate through examples that each of the functions work.

#### Simple Loop

```{r}
## Input of 3
loop(3)

## Input of 3000
loop(3000)

```

#### Vectorized Function

```{r}
## Input of 3
vectorized(3)

## Input of 3000
vectorized(3000)
```

#### Vectorized with Tables

```{r}
## Input of 3
tableVectorized(3)

## Input of 3000
tableVectorized(3000)
```

#### Loop with Apply

```{r}
## Input of 3
loopApply(3)

## Input of 3000
loopApply(3000)
```

### Part C

Set a seed in order to demonstrate that each of the 4 functions output the same results.

#### Simple Loop

```{r}
set.seed(10)

## Input of 3
loop(3)

## Input of 3000
loop(3000)

```

#### Vectorized Function

```{r}
set.seed(10)

## Input of 3
vectorized(3)

## Input of 3000
vectorized(3000)
```

#### Vectorized with Tables

```{r}
set.seed(10)

## Input of 3
tableVectorized(3)

## Input of 3000
tableVectorized(3000)
```

#### Loop with Apply

```{r}
set.seed(10)

## Input of 3
loopApply(3)

## Input of 3000
loopApply(3000)
```

### Part D

The 'microbenchmark' package will now be used to calculate the speed for each of the implementations.

#### Simple Loop

```{r}
library("microbenchmark")

## Input of 1000 vs 100,000
microbenchmark(loop(1000), loop(100000))

```

#### Vectorized Function

```{r}
## Input 1,000 vs 100,000
microbenchmark(vectorized(1000), vectorized(100000))
```

#### Vectorized with Tables

```{r}
## Input 1,000 vs 100,000
microbenchmark(tableVectorized(1000), tableVectorized(100000))
```

#### Loop with Apply

```{r}
## Input 1,000 vs 100,000
microbenchmark(loopApply(1000), loopApply(100000))
```

I was surprised to see that the Vectorized function which utilized a table was slower than all the other functions. I was under the assumption that using a table would have at least reduced the calculation time over the for loop used for the simple loop function, since we could use the table's index. Aside from that surprising result, loopApply was faster than the simple loop function but the fastest was the purely vectorized function.

Thus in order of the fastest to the slowest:

1.  vectorized
2.  loopApply
3.  loop 'simple loop'
4.  tableVectorized

### Part E

#### Monte Carlo Simulation

The idea of a game being fair in my opinion relies upon an equal chance for the player to make money vs lose money. For example, in a game of tossing a coin and calling a side, the player would have an equal chance of both winning and losing.

```{r}

## Monte Carlo simulation
#' Monte Carlo Simulation
#'
#' @param reps 
#'
#' @return Histogram & Table
monte <- function(reps) {
  
  ## create an empty Prob(Profit) data.frame
  pProfit <- data.frame()
  
  ## roll the dice from 1 to 1000 on various increments
  for (rolls in c(1,2,10,20,40,60,80,100,1000)) {
    
    ## create an empty vector sized according to the reps
    v <- vector(length = reps)
  
    ## cycle through the reps and calculate the total winnings
    for (i in seq_len(reps)) {
      v[i] <- vectorized(rolls, nice=2)
    }
    
    ## save rolls and their winnings as a table
    winnings <- table(v)
    ## calculate probability to rolls that result in a profit
    profit <- sum(winnings[as.numeric(names(winnings))>(0)])/reps
     
    ## print the current roll and the amount profit
    pProfit <- rbind(pProfit, list(rolls, profit))
    
  }
  
  ## at the very end return the final histogram containing the
  ## user defined repetitions along with this table
  names(pProfit)[1] <- "Total Rolls"
  names(pProfit)[2] <- "Prob(Profit)"
  print(pProfit)
  
  return(hist(v, main=paste("Histogram of", reps, "Repetition"), 
              xlab = "$Winnings"))
}

```

```{r}
monte(10000)
```

According to the simulation it seems that this game is very much in favor of the player. If they spend 4 dollar (2 rolls) they will have about a 55% chance of making a profit. That chance will increase to about 90% if they spend 120 dollars (60 rolls). This game isn't very 'fair' for the house since they are very likely to lose money. One way of making the game fair would be to lower the winnings for rolling a 3 or a 5.


## Problem 2

### Part A

The cars data was read into RStudio and the column names were modified to a resonable length. 
```{r}
## Set correct working directory and import the label the relevant data
setwd("C:/Users/beh_2/Documents/STATS506/ProblemSet_2/data")

cars <- read.csv("cars.csv", header = FALSE, skip=1)

## remove unnecessary columns based on question to be answered
keep <- c("V1", "V2", "V3", "V9", "V10", "V11", "V16", "V17", "V18")
cSub <- subset(cars, select = keep)

## rename columns
names(cSub) <- c("Height", "Length", "Width", "cMPG", "fType", "hMPG",
                 "Year", "Horsepower", "Torque")

```

## Part B

The data will now be restricted to only have cars that consume gasoline.

```{r}
## Subset data.frame to only contain gasoline
cSub = subset(cSub, cSub$fType=="Gasoline")

## display that is worked
unique(cSub$fType)

```

## Part C

After plotting the highway MPG data onto a histogram it was observed that there was an outlier. For some reason the 2011 Chevy Silvarado hybrid was getting 223 hMPG and throwing off the distribution. I have a hunch that it's an input error so it was removed from the data. The distribution is much more reasonable and will be used for the rest of the analysis.

```{r}
## examine the distribution
hist(cSub$hMPG)

## remove the 2011 Chevy Silvarado w/ 223 hMPG!
cSub = subset(cSub, cSub$hMPG<223)

## use the histogram to check distribution
hist(cSub$hMPG)

```

## Part D

A linear regression model was created predicting for highway MPG w/ respect to torque and controlling for horsepower, dimensions of the car and the year the car was released set as a categorical variable. Overall, it seems that most of the predictors have a very small impact (positive OR negative) on the highway MPG (avg. 32.41) of the vehicle. Torque has a very small negative impact (.052 decrease in hMPG) while only Horsepower, Height and Year2012 are statistically significant as controls for Torque. Horsepower and Height contribute minimally to increasing the highway MPG, while the year 2012 had the most impact by increasing highway MPG about 1.29. 

```{r}
## set 'Year' as.factor to be treated as a categorical variable
cSub$Year <- as.factor(cSub$Year)

## create lm model w/ hMPG~Torque+Horsepower+Height+Length+Width+Year
mod1 <- lm(hMPG ~ Torque + Horsepower + Height + Length + Width 
           + Year, data = cSub)

summary(mod1)
```

## Part E

Seeing as Torque and Horsepower are interacting with each other, another model was created to elucidate their interactions. The next step was to identify relevant values for Horsepower that encompass most of the data. This was done by visualizing a plot of Horsepower vs Torque.

```{r}
plot(cSub$Horsepower, cSub$Torque)

## Select Horsepower values that are +or-2SD from the mean
hp <- c(100, mean(cSub$Horsepower),
        mean(cSub$Horsepower)+(2*sd(cSub$Horsepower)))

print(cat("-2SD:", hp[1], "Mean:", hp[2], "+2SD:", hp[3]))

```
Based on this plot it was determined Horsepower values being 2SD on either side of the mean encompass most of the tightly packed data. However 100 Horsepower was chosen because it the lowest available value. Lastly, Year of 2012 was chosen since the summary of the new model showed that year having the most impact on the hMPD. 

```{r}
library(interactions)

## Fit the model by including the Torque*Horsepower interaction
mod2 <- lm(hMPG ~ Torque + Horsepower + Height + Length + Width 
           + Year + Torque*Horsepower, data = cSub)

summary(mod2)
```

```{r}
## Create the interaction plot w/ Year=2012 
## and Horsepower as specified above
interact_plot(mod2, pred = Torque, modx = Horsepower,
              at = c(cSub$Year==2012), modx.values = hp,
              modx.labels = c("-2SD", "Mean", "+2SD"))
```

## Part F

Manually fit the model.matrix from Part D. As shown by the code the manual model matrix is equal to the coefficients from the original model (mod1).

```{r}
## the formula describing the interactions
form <- hMPG ~ Torque + Horsepower + Height + Length + Width + Year

## create a design matrix
mm <- model.matrix(form, data = cSub)

## lm calculations
manualLM <- solve(t(mm) %*% mm) %*% t(mm) %*% as.matrix(cSub$hMPG)

## Check if mod1$coefficients is approx. equal to manualLM
all.equal(manualLM[,1], mod1$coefficients)
manualLM[,1]
mod1$coefficients

```