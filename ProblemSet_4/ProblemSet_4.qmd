---
title: "ProblemSet_4"
author: "Behram Radmanesh"
format: 
  html:
      code-fold: true
      code-tools: true
      embed-resources: true
toc: true
---

[Github Link](https://github.com/MediciPrime/STATS506/tree/main/ProblemSet_4)

## Problem 1 - Tidyverse

### Part A
```{r}
library(nycflights13)
library(tidyverse)

# Mean & Median Departure Delay
flights %>%
  group_by(origin) %>%
  summarise(mean_dep_delay = mean(dep_delay, na.rm = TRUE),
            median_dep_delay = median(dep_delay, na.rm = TRUE),
            num_of_flights = n()) %>%
  ungroup() %>%
  filter(num_of_flights >= 10) %>%
  rename(faa = origin) %>%
  left_join(airports, by = "faa") %>%
  select(name, mean_dep_delay, median_dep_delay) %>%
  arrange(desc(mean_dep_delay))

# Mean & Median Arrival Delay
flights %>%
  group_by(dest) %>%
  summarise(mean_arr_delay = mean(arr_delay, na.rm = TRUE),
            median_arr_delay = median(arr_delay, na.rm = TRUE),
            num_of_flights = n()) %>%
  ungroup() %>%
  filter(num_of_flights >= 10) %>%
  rename(faa = dest) %>%
  left_join(airports, by = "faa") %>%
  select(name, mean_arr_delay, median_arr_delay) %>%
  arrange(desc(mean_arr_delay)) %>%
  print(n = 102)
```

### Part B

```{r}
flights %>%
  left_join(planes, by = "tailnum") %>%
  group_by(model) %>%
  summarize(avg_MPH = mean(distance/(air_time/60), na.rm = TRUE),
            num_of_flights = n()) %>%
  ungroup() %>%
  select(model, num_of_flights, avg_MPH) %>%
  arrange(desc(avg_MPH)) %>%
  slice(1)

```

## Problem 2 - get_temp()

```{r}
## Load nnmaps dataset
nnmaps <- read_csv("data/chicago-nmmaps.csv")

#' Obtain Average Monthly Temperature
#'
#' @param month Month in Numeric (1-12) OR String
#' @param year Year
#' @param data Data
#' @param celsius Logical for Celsius vs. Fahrenheit; Default: Celsius 
#' @param average_fn Function to compute mean. Default: mean
#'
#' @return Average temperature
get_temp <- function(month, year, data, 
                     celsius = FALSE, average_fn = mean) {
  
  ## Handle exception for month
  if (month %>% is.numeric) {
    ## Ensure it's between 1 - 12
    if (month < 1 | month > 12) {
      stop("Please Use Gregorian Calendar, eg. 1, 2, 3,...,12")
    }
  }
  else if (month %>% is.character) {
    ## Attempt to match user inputs w/ 'months' vector
    months <- c("January", "February", "March", "April", "May",
                "June", "July", "August", "September", "October",
                "November", "December")
    
    ## Use 'match.arg' to match the months
    month %>%
      match.arg(months) %>%
      `==`(months) %>%
      which -> month
  } else {
    stop("Please Use Gregorian Calender, eg. January, February,...")
  }
  
  ## Handle exception if user doesn't input year between 1997-2000
  if (year >2000 | year < 1997) {
    stop("Please select year between 1997 - 2000")
  }
  
  ## Handle exception if users doesn't input a function
  if (!(average_fn %>% is.function)) {
    stop("'average_fn' must be an R Function")
  }
  
   ## Handle exception if user doesn't input numeric year
  if (!year %>% is.numeric) {
    stop("Enter Numeric Year, eg. 2024")
  }
  
  data %>%
    select(year, temp, month_numeric) %>%
    ## Rename to avoid w/ user and data 'year'
    rename(tmp_year = year) %>%
    filter(tmp_year == year,
           month_numeric == month) %>%
    summarise(avg_tmp = average_fn(temp)) %>%
    mutate(avg_tmp = ifelse(isTRUE(celsius), 
                            5/9*(avg_tmp - 32), avg_tmp)) %>%
    ## Problem request numeric to be used
    as.numeric -> out
  
  return(out)
}

```

```{r}
#| error: true

get_temp("Apr", 1999, data = nnmaps)

get_temp("Apr", 1999, data = nnmaps, celsius = TRUE)

get_temp(10, 1998, data = nnmaps, average_fn = median)

get_temp(13, 1998, data = nnmaps)

get_temp(2, 2005, data = nnmaps)

get_temp("November", 1999, data =nnmaps, celsius = TRUE,
         average_fn = function(x) {
           x %>% sort -> x
           x[2:(length(x) - 1)] %>% mean %>% return
         })
```

## Problem 3 - Visualization

### Part A - Change In Sales Price Over Time
```{r}
library(ggplot2)

artsales <- read.csv("data/df_for_ml_improved_new_market.csv")

## Use 'medianprice_year' since there are large outliers
## affecting the mean price
ggplot(artsales, aes(x = year, y = medianprice_year)) +
  geom_point()

```

Median yearly price was used rather than mean because there are large outliers that affect the mean yearly price. There is an overall increase in the median sales price over the years. 

### Part B - Distribution of Genre Of Sales
```{r}
library(ggplot2)

artsales <- read.csv("data/df_for_ml_improved_new_market.csv")

ggplot(artsales, aes(x = year, y = medianprice_year)) +
  geom_point()

ggplot(artsales, aes(x = year, y=fest_biennal)) +
  geom_point()

ggplot(artsales, aes(x = year, y=private_inst)) +
  geom_point()

ggplot(artsales, aes(x = year, y=public_inst)) +
  geom_point()

ggplot(artsales, aes(x = year, y=solo_show)) +
  geom_point()

ggplot(artsales, aes(x = year, y=group_show)) +
  geom_point()
```

### Part C - Genre Affect Change In Sales Price
```{r}


```