---
title: "ProblemSet_5"
author: "Behram Radmanesh"
format: 
  html:
      code-fold: true
      code-tools: true
      embed-resources: true
toc: true
---

[Github Link](https://github.com/MediciPrime/STATS506/tree/main/ProblemSet_5)

## Problem 1 - OOP Programming

### Part A
```{r}
## Create the gcd and lcm function using Rcpp
library(Rcpp)

## Include these functions
sourceCpp("gcd_lcm.cpp")

## Create the 'rational' constructor
setClass("rational",
         contains = "numeric",
         slots = c(
           numerator = "numeric",
           denominator = "numeric"
         ),
         ## check to ensure 0 isn't in denominator
         validity = function(object) {
           if (object@denominator == 0) {
             stop("Denominator cannot be zero.")
           }
           ## check to ensure complex numbers aren't used
           if (is.complex(object@numerator) || is.complex(object@denominator)) {
             stop("Numerator and denominator cannot be complex numbers.")
           }
           TRUE
         })

## 'show' method for clean outputs
setMethod("show", "rational",
          function(object) {
            cat(object@numerator, "/", object@denominator, "\n")
          })

 

## Streamlined 'simplify' method for rational objects
setGeneric("simplify", 
           function(object) standardGeneric("simplify"))

setMethod("simplify", "rational",
          function(object) {
            gcd <- gcd(object@numerator, object@denominator)
            new("rational",
                numerator = object@numerator %/% gcd,
                denominator = object@denominator %/% gcd)
          })

## Create quotient and various dependent arithmetic methods
setGeneric("quotient", 
           function(object, digits = 7) standardGeneric("quotient"))

setMethod("quotient", "rational",
          function(object, digits) {
            result <- object@numerator / object@denominator
            cat(round(result, digits), "\n")
          })

setMethod("+", signature(e1 = "rational", e2 = "rational"),
          function(e1, e2) {
            common_denom <- lcm(e1@denominator, e2@denominator)
            new_numerator <- (e1@numerator * (common_denom / e1@denominator)) +
                             (e2@numerator * (common_denom / e2@denominator))
            new_rational <- new("rational", numerator = new_numerator,
                                denominator = common_denom)
            return(simplify(new_rational))
          })

setMethod("-", signature(e1 = "rational", e2 = "rational"),
          function(e1, e2) {
            common_denom <- lcm(e1@denominator, e2@denominator)
            new_numerator <- (e1@numerator * (common_denom / e1@denominator)) -
                             (e2@numerator * (common_denom / e2@denominator))
            new_rational <- new("rational", numerator = new_numerator,
                                denominator = common_denom)
            return(simplify(new_rational))
          })

setMethod("*", signature(e1 = "rational", e2 = "rational"),
          function(e1, e2) {
            new_numerator <- e1@numerator * e2@numerator
            new_denominator <- e1@denominator * e2@denominator
            new_rational <- new("rational", numerator = new_numerator,
                                denominator = new_denominator)
            return(simplify(new_rational))
          })

setMethod("/", signature(e1 = "rational", e2 = "rational"),
          function(e1, e2) {
            new_numerator <- e1@numerator * e2@denominator
            new_denominator <- e1@denominator * e2@numerator
            new_rational <- new("rational", numerator = new_numerator,
                                denominator = new_denominator)
            return(simplify(new_rational))
          })

```

### Part B
```{r}
#| error: true

# Examples
r1 <- new("rational", numerator = 24, denominator = 6)
r2 <- new("rational", numerator = 7, denominator = 230)
r3 <- new("rational", numerator = 0, denominator = 4)

r1
r3
r1 + r2
r1 - r2
r1 * r2
r1 / r2
r1 + r3
r1 * r3
r2 / r3
quotient(r1)
quotient(r2)
quotient(r2, digits = 3)
quotient(r2, digits = 3.14)
quotient(r2, digits = "avocado")
q2 <- quotient(r2, digits = 3)
q2
quotient(r3)
simplify(r1)
simplify(r2)
simplify(r3)

```


### Part C

```{r}
#| error: true

## Check for Zero in denominator
r4 <- new("rational", numerator = 24, denominator = 0)

## Check for Complex number
r5 <- new("rational", numerator = 2i, denominator = 1)
```


## Problem 2 - plotly

### Part A: Any Change in the Distribution of Genre Of Sales?

Note: Professor Errickson's plot was used for this analysis as allowed by the problem instructions.

As such the 'gg' object will be passed into the 'ggplotly' function.
```{r}
library(plotly)
library(ggplot2)

## Professor Errickson's Plot was used
art <- read.csv("data/art.csv")

## Cleanup Data
art$Genre___Others[art$Genre___Painting == 1] <- 0
unique(art[, grep("^Genre", names(art))])

## Rename Table Headers
art$genre <- "Photography"
art$genre[art$Genre___Print == 1] <- "Print"
art$genre[art$Genre___Sculpture == 1] <- "Sculpture"
art$genre[art$Genre___Painting == 1] <- "Painting"
art$genre[art$Genre___Others == 1] <- "Other"

## Subset Genre w/ respect to year
(yeargenre <- with(art, table(year, genre)))

## Obtain the proportions
ygperc <- yeargenre/apply(yeargenre, 1, sum)
ygperc <- ygperc[, c("Painting", "Sculpture", "Photography", "Print", "Other")]

## Convert to DataFrame and reverse levels of factor for ggplot
ygpercm <- as.data.frame(ygperc)
ygpercm$genre <- factor(ygpercm$genre, 
                        levels = rev(unique(ygpercm$genre)))

## Create the ggplot object
g <- ggplot(ygpercm, aes(y = Freq, x = year, fill = genre)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(y = NULL, x = NULL, title = "Proportion of Genre of Art Sales") +
  theme(legend.position = "off") +
  geom_text(data = ygpercm[ygpercm$year == 2012 & ygpercm$genre != "Other", ],
            aes(label = genre),
            position = position_stack(vjust = 0.5),
            color = "white",
            size = 4) +
  # Add the Other label
  geom_segment(aes(xend = 16, yend = 1, x = 15, y = 1.02),
               arrow = arrow(length = unit(0.15, "inches")),
               linewidth = .5, color = "black") +
  annotate("text", x = 14.9, y = 1.02, label = "Other", hjust = 0, angle = 270)

## Pass the ggplot object into ggplotly
ggplotly(g)
```

### Part B: Genre's Affect On Sales Price

```{r}
library(dplyr)

## Median art sale prices
artmedian <- aggregate(art$price_usd, by = list(art$year, art$genre),
                       FUN = median, na.rm = TRUE)
names(artmedian) <- c("year", "genre", "price_usd")

## 97.5% art sale prices
art975 <- aggregate(art$price_usd, by = list(art$year, art$genre),
                   FUN = quantile, .975, na.rm = TRUE)
names(art975) <- c("year", "genre", "price_usd")

## Factorize Genre for ggplot
artmedian$genre <- factor(artmedian$genre, 
                          levels = rev(unique(artmedian$genre)))
art975$genre <- factor(art975$genre, levels = rev(unique(art975$genre)))
artcombine <- bind_rows(artmedian %>% mutate(measure = "Median"),
                        art975 %>% mutate(measure = "97.5%"))

## Create gg object
g2 <- ggplot(artcombine, aes(x = year, y = price_usd, color = genre,
                             linetype = measure)) +
  geom_line() +
  scale_y_continuous(
    name = "Price in Thousands USD",
    breaks = seq(0, 350000, by = 50000),
    labels = paste(seq(0, 350, by = 50), "k", sep = "")
  ) +
  scale_x_continuous(
    name = NULL,
    breaks = seq(1997, 2012, by = 2),
    limits = c(1997, 2012)
  ) +
  labs(title = "Changes in Price by Genre") +
  scale_color_manual(values = 1:5) +
  scale_linetype_manual(values = c("97.5%" = "dotted", "Median" = "solid")) +
  theme(
    legend.position = "inside",
    legend.position.inside = c(.1, .75),
    legend.background = element_blank(),
    legend.title = element_blank()
  )

## Push gg object into plotly
ggplotly(g2)
```

There is a change in sales price overtime w/ respect to outliers but not median. If mean was used then the outliers would have affected the mean price because they are so dramatic.


## Problem 3 - data.table

### Part A
```{r}
library(data.table)
library(nycflights13)

## Read in 'flights' data w/ data.table function
flights <- data.table(flights)

## Obtain departures
mergeDep <- merge(flights[, faa := origin],
                  airports,
                  by = "faa",
                  all.x = TRUE)

## Group by name and finalize table
depart <- mergeDep[, .(meanDelay = mean(dep_delay, na.rm = TRUE),
                       medianDelay = median(dep_delay, na.rm = TRUE)),
                   by = name]

depart

## Obtain arrivals
mergeArr <- merge(flights[, faa := dest],
                  airports,
                  by = "faa",
                  all.x = TRUE)

## Group by name
arrival <- mergeArr[, .(meanDelay = mean(arr_delay, na.rm = TRUE),
                        medianDelay = median(arr_delay, na.rm = TRUE)),
                    by = name]

arrival |> _[order(meanDelay, decreasing = TRUE)] |>
  print(x = _, nrows = 102)

```

### Part B
```{r}
planes <- data.table(planes)

mergeFP <- merge(flights, planes, by = "tailnum", all.x = TRUE)

calculated <- mergeFP[, .(numFlights = .N,
                          avgmph = mean(distance/(air_time/60), 
                                        na.rm = TRUE)),
                      by = model]

calculated[calculated[, which.max(avgmph)], .(model, avgmph,
                                              numFlights)]
```