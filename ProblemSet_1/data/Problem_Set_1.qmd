---
title: "Problem Set 1"
author: "Behram Radmanesh"
format: html
---

## Problem 1

The first step in working with data is to import it into the r-session. Prior to doing this I glanced at the 'wine.names' file and identified all the relevant columns.  


```{r}
## Set correct working directory and import the label the relevant data
setwd("C:/Users/beh_2/Documents/STATS506/ProblemSet_1/data")
wine <- read.table("wine.data", sep=",", col.names = c("Class", "Alcohol", "Malic_Acid", "Ash", "Alcalinity_of_ash", "Magnesium", "Total_phenols"
                                                    ,"Flavanoids", "Nonflavanoid_phenols", "Proanthocyanins", "Color_intensity", "Hue",
                                                    "OD280/OD315_of_diluted_wines", "Proline"))
head(wine)
```

### Question 1: What is the correlation between alcohol content and color intensity?

This question can be answered by using the linear regression function and setting 'Alcohol' ~ 'Color_intensity'.

```{r}
q1 <- lm(Alcohol ~ Color_intensity, data=wine)
q1
```
There is very little correlation between alcohol content and color intensity, 0.1913.

### Question 2: Which class has the highest correlation? Which has the lowest?


```{r}
class1 <- which(wine$Class==1)
lmClass1 <- lm(Alcohol ~ Color_intensity, data=wine[class1,])
lmClass1

class2 <- which(wine$Class==2)
lmClass2 <- lm(Alcohol ~ Color_intensity, data=wine[class2,])
lmClass2

class3 <- which(wine$Class==3)
lmClass3 <- lm(Alcohol ~ Color_intensity, data=wine[class3,])
lmClass3
```

It seems as though the wine from Class 2 has the highest correlation at 0.1569 while the wine from Class 3 has the lowest correlation at 0.08039.

### Question 3: What is the alcohol content of the wine with the highest color intensity?

This question can be answered by some simple data exploration using a combination of the which and max functions.

```{r}
## Identify row with the wine having the highest color intensity
which(wine$Color_intensity==max(wine$Color_intensity))

## Use the identified row '159' to identify the wine's alcohol content
wine[159, c("Alcohol", "Color_intensity")]
```

The wine with the highest color intensity of 13 has an alcohol content of 14.34.

### Question 4: What percentage of wines had a higher content of proanthocyanins compared to ash?

This question was solved by calculating the number of wines having a higher Proanthocyanin content compared to Ash. After that number was determined it was simply divided by the total number of wines available.

```{r}
## Use the which and length functions to create a fraction that determines a percentage
(length(which(wine$Proanthocyanins>wine$Ash))/length(wine$Proanthocyanins))*100

```
About 8.43% of the wines had a higher Proanthocyanins content compared to Ash.

### Table containing the requested information.

```{r}
calculate_attribute_means <- function(df, group_by = NULL) {
  # Check if the input is a data frame
  if (!is.data.frame(df)) {
    stop("Input must be a data frame.")
  }

  # Extract numeric columns
  numeric_cols <- sapply(df, is.numeric)

  # Check if grouping is specified
  if (!is.null(group_by)) {
    # Group by specified columns and calculate means
    means <- aggregate(df[, numeric_cols], by = list(df[, group_by]), mean)
    colnames(means)[1] <- "Group"
  } else {
    # Calculate means without grouping
    means <- colMeans(df[, numeric_cols], na.rm = TRUE)
    means <- data.frame(Mean = means)
  }
  
  # Return the table
  return(means)
}

## Call 'calculate_attribute_means' function to group means by Class
groupMeansDF <- calculate_attribute_means(wine, group_by = "Class")
modifiedDF <- groupMeansDF[,2:15] # subset the new df
rownames(modifiedDF) <- groupMeansDF[,"Class"] # set 'Class' values as index

## Call 'calculate_attribute_means' function w/out specifying group 'Class'
nonGroupMeansDF <- calculate_attribute_means(wine[2:14])# subset out 'Class'

## Use 'rbind' to append the overall averages to the 'modifiedDf'
finalDataFrame <- rbind(modifiedDF[,2:14], nonGroupMeansDF[[1]])
finalDataFrame
```

### T-Test Phenol Levels ~ Class

The question as to determine is there is any difference in the level of Phenols and the 3 different classes of wines.

```{r}
## T-test for Class 1 vs 2
with(wine, t.test(Total_phenols[Class==1], Total_phenols[Class==2]))

## T-test for Class 1 vs 3
with(wine, t.test(Total_phenols[Class==1], Total_phenols[Class==3]))

## T-test for Class 2 vs 3
with(wine, t.test(Total_phenols[Class==2], Total_phenols[Class==3]))

```

It seems that according to the t-tests all three classes of wines have significantly varying levels of phenols.

## Problem 2

This problem requests that I perform some data manipulation and cleaning.

```{r}
## Once again the first step is to import the data
## I took the liberty to skip the first row and simplify the
## column headers
salary <- read.table("AskAManager.csv", sep=",", col.names = c("Person", "Time", "Age", "Industry", "Job_Title", "Job_Title_Context", "Annual_Salary", "Misc_Compensation", "Currency", "Other_Currency", "Salary_Context", "Country", "State", "City", "Overall_Experience", "Field_Specific_Experience", "Education", "Gender", "Race"), skip = 1)

## Restrict data to only have individuals paid in USD
salaryUSD <- salary[salary$Currency=="USD",]

## Show number of individuals dropped after restriction
dim(salary)[1]-dim(salaryUSD)[1]

## Remove anyone that is 'under 18'
salaryAge <- salaryUSD[salaryUSD$Age!='under 18',]

## Remove anyone who's Age and Experience don't make sense
## TODO: Need to check efficient way to go about this 
salaryAge$Age=="25-34" & (salaryAge$Overall_Experience==c("8-10 years") | salaryAge$Field_Specific_Experience==c("8-10 years"))

## Obtain summary statistics for salary range
summary(salaryAge$Annual_Salary)
salaryFin <- salaryAge[salaryAge$Annual_Salary<102000000,] ## eat the billionare
summary(salaryFin$Annual_Salary)
salaryFin <- salaryFin[salaryFin$Annual_Salary<10000000,] ## the person's job title is 'bum' but makes $10 million
summary(salaryFin$Annual_Salary)
salaryFin <- salaryFin[salaryFin$Annual_Salary<5000044 ,] ## person is an 'inside sales manager' that makes $5million
summary(salaryFin$Annual_Salary)

salaryFin[salaryFin$Annual_Salary==3000000, ] ## can't justify removing an 'Art & Design' 'Owner and CEO' that makes $3million

summary(salaryFin$Annual_Salary)
salaryFin <- salaryFin[salaryFin$Annual_Salary>1000 ,]
summary(salaryFin$Annual_Salary)

salaryFin[salaryFin$Annual_Salary==1200,]
salaryFin <- salaryFin[salaryFin$Annual_Salary>1200,] ## person is from Myanmar Colorado making $1200 as a risk management associate

summary(salaryFin$Annual_Salary)
salaryFin[salaryFin$Annual_Salary==1442,] ## person is an 'Associate Team Lead -Revenue Cycle' w/ 'Some college' making $1442 & $3010; can't justify removing

## Final Sample Size
dim(salaryFin)

```
Final sample size includes 23,281 individuals.

## Problem 3

This problem asks for the creation of a function that checks for Palindromic Numbers.

```{r}
## Create the isPalindrome Function
isPalindromic <- function(val) {
  
  # Convert numeric to string
  word <- as.character(val)
  
  # Remove spaces and convert to lowercase for case-insensitive comparison
  word <- tolower(gsub(" ", "", word))
  
  # TODO: Add statement to check from 0 at end.

  # Reverse the word
  reversed_word <- rev(strsplit(word, "")[[1]])
  
  # Turn into word again
  reversed_word <- paste(reversed_word, collapse="")
  
  return_list <- c("Palindrome" = all(word==reversed_word), 
                   "Reversed Word" = reversed_word)

  # Check if the original and reversed words are equal
  return(return_list)
}
```

The next question asks to create a function that will find the next palindrome. 

```{r}
nextPalindrome <- function(num) {
  # Check if numeric was inputted
  if(is.numeric(num)==FALSE) {
   print("Please enter a number.")
    break
  }
  
  # Increase number by 1
  num <- num + 1
  
  # Convert number to string
  num_str <- as.character(num)

  # Increment the number until a palindrome is found
  while (isPalindromic(num_str)[[1]]==FALSE) {
    num <- num + 1
    num_str <- as.character(num)
  }

  # Return the palindrome
  return(as.numeric(num_str))
}
```

The following are tests to check if the 'nextPalindrome' function works.

```{r}
nextPalindrome(391)
nextPalindrome(9928)
nextPalindrome(19272719)
nextPalindrome(109)
nextPalindrome(2)
```
